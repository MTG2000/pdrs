{"version":3,"sources":["Views/Shared/Header.jsx","Views/Shared/Footer.jsx","Views/Shared/PrivateRoute.jsx","helpers/AppRouter.jsx","App.js","helpers/iconsLibrary.js","helpers/aos.js","helpers/materialTheme.js","helpers/ScrollToTopController.js","helpers/AppWrapper.js","index.js","stores/NewPrescriptionStore.jsx","stores/PatientPrescriptionsStore.jsx","stores/PrescriptionsDispensingStore.jsx","stores/AppStore.jsx","stores/Context.js","Views/Shared/LoadingPage.jsx"],"names":["Header","store","username","role","Navbar","collapseOnSelect","expand","bg","variant","style","zIndex","Brand","href","className","Toggle","aria-controls","Collapse","id","Nav","to","NavLink","onClick","a","Logout","Footer","PrivateRoute","Component","component","isAuth","props","console","log","render","innerProps","PatientsPrescriptions","React","lazy","NewPrescription","LoginPage","Home","DispensePrescription","Contact","observer","Suspense","fallback","LoadingPage","fullPage","path","App","AppStore","useContext","mainContext","useState","Container","library","add","faSmile","faAddressBook","AOS","init","offset","duration","easing","delay","theme","createMuiTheme","typography","fontFamily","join","palette","primary","main","secondary","overrides","MuiOutlinedInput","notchedOutline","borderColor","borderWidth","MuiInputLabel","root","color","ScrollToTop","prevProps","this","location","window","scrollTo","children","withRouter","AppWrapper","Context","ThemeProvider","ReactDOM","document","getElementById","NewPrescriptionStore","patientId","patientName","showPatientNameInput","note","medicins","classifications","selectedClassification","submitingPrescription","loading","redirect","v","FetchPatientName","length","fetch","res","json","data","runInAction","Name","medicine","push","index","filter","m","i","isChronic","isBold","value","prescription","toJS","classificationId","method","headers","Accept","body","JSON","stringify","response","ok","Error","NotificationManager","success","setTimeout","error","decorate","observable","AddMedicine","action","SetPatientId","FetchClassifications","RemoveMedicin","ToggleBold","ToggleChronic","SelectClassification","SetNote","SubmitPrescription","SetPatientName","PatientPrescriptionsStore","allPrescriptions","prescriptions","chronicMedicins","loadingPrescriptions","FetchPrescriptions","p","Classification_Id","abortController","abort","fetchUrl","concat","AbortController","signal","FilterPrescriptions","name","PrescriptionsDispensingStore","prescriptionId","messagesCategories","localStorage","getItem","doctorName","undefined","pharmacyName","password","redirectUrl","removeItem","setItem","DoctorName","PharmacyName","IsAdmin","type","phone","email","category","content","Login","FetchMessagesCategories","createContext","ContextProvider","Provider","useTheme","minHeight","height","width","margin","message"],"mappings":"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","file":"static/js/main.58e3c9a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav, NavLink } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = ({ store }) => {\r\n  const username = store.username;\r\n  const role = store.role;\r\n\r\n  return (\r\n    <Navbar\r\n      collapseOnSelect\r\n      expand=\"lg\"\r\n      bg=\"primary\"\r\n      variant=\"dark\"\r\n      style={{ zIndex: 100 }}\r\n    >\r\n      <Navbar.Brand href=\"/\">\r\n        <h4 className=\"no-gutters mb-0\">P.D.R.S</h4>\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"ml-auto text-white\">\r\n          {role === \"Doctor\" && (\r\n            <Link className=\"nav-link text-white\" to=\"/new-prescription\">\r\n              New Prescription\r\n            </Link>\r\n          )}\r\n          {role === \"Pharmacy\" && (\r\n            <Link className=\"nav-link text-white\" to=\"/dispense-prescription\">\r\n              Dispense Prescription\r\n            </Link>\r\n          )}\r\n          {role === \"Doctor\" && (\r\n            <Link className=\"nav-link text-white\" to=\"/patients-prescriptions\">\r\n              Patinets Prescriptions\r\n            </Link>\r\n          )}\r\n          {role === \"Admin\" && (\r\n            <NavLink className=\"nav-link text-white\" href=\"/admin\">\r\n              Admin Dashboard\r\n            </NavLink>\r\n          )}\r\n          {username && role !== \"Admin\" && (\r\n            <Link className=\"nav-link text-white\" to=\"/contact\">\r\n              Technical Support\r\n            </Link>\r\n          )}\r\n          {!username && (\r\n            <Link className=\"nav-link text-white\" to=\"/about\">\r\n              About{\" \"}\r\n            </Link>\r\n          )}\r\n          {!username ? (\r\n            <Link className=\"nav-link text-white\" to=\"/login\">\r\n              Login\r\n            </Link>\r\n          ) : (\r\n            <Link\r\n              className=\"nav-link text-white\"\r\n              to=\"#\"\r\n              onClick={async () => {\r\n                await store.Logout();\r\n              }}\r\n            >\r\n              Logout\r\n            </Link>\r\n          )}\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return <footer />;\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ component: Component, isAuth = false, ...props }) => {\r\n  console.log(\"Private\");\r\n  return (\r\n    <Route\r\n      {...props}\r\n      render={innerProps => {\r\n        return isAuth ? (\r\n          <Component {...innerProps} />\r\n        ) : (\r\n          <Redirect to=\"/login\" />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"../Views/Shared/PrivateRoute\";\r\nimport { observer } from \"mobx-react\";\r\nimport LoadingPage from \"../Views/Shared/LoadingPage\";\r\n\r\nconst PatientsPrescriptions = React.lazy(() =>\r\n  import(\"../Views/PatinetsPrescriptions\")\r\n);\r\nconst NewPrescription = React.lazy(() => import(\"../Views/NewPrescription\"));\r\nconst LoginPage = React.lazy(() => import(\"../Views/Login\"));\r\nconst Home = React.lazy(() => import(\"../Views/Home\"));\r\n\r\nconst DispensePrescription = React.lazy(() =>\r\n  import(\"../Views/PrescriptionsDispensing\")\r\n);\r\nconst Contact = React.lazy(() => import(\"../Views/Contact\"));\r\n\r\nconst AppRouter = ({ store }) => {\r\n  const { username, role } = store;\r\n\r\n  return (\r\n    <React.Suspense fallback={<LoadingPage fullPage={true} />}>\r\n      <Switch>\r\n        <Route path=\"/login\" component={LoginPage} />\r\n        <PrivateRoute path=\"/contact\" component={Contact} isAuth={username} />\r\n        <PrivateRoute\r\n          path=\"/new-prescription\"\r\n          component={NewPrescription}\r\n          isAuth={role === \"Doctor\"}\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dispense-prescription\"\r\n          component={DispensePrescription}\r\n          isAuth={role === \"Pharmacy\"}\r\n        />\r\n        <PrivateRoute\r\n          path=\"/patients-prescriptions\"\r\n          component={PatientsPrescriptions}\r\n          isAuth={username}\r\n        />\r\n        <Route path=\"/\" component={Home} />\r\n      </Switch>\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nexport default observer(AppRouter);\r\n","import React, { useContext, useState } from \"react\";\nimport Header from \"./Views/Shared/Header\";\nimport Footer from \"./Views/Shared/Footer\";\nimport { NotificationContainer } from \"react-notifications\";\nimport { Container } from \"react-bootstrap\";\n\nimport { mainContext } from \"./stores/Context\";\nimport AppRouter from \"./helpers/AppRouter\";\n// import Overlay from \"./components/Shared/Overlay\";\n\nfunction App() {\n  const { AppStore } = useContext(mainContext);\n  const [store] = useState(AppStore);\n\n  return (\n    <div className=\"App\">\n      <NotificationContainer />\n      <Header store={store} />\n      <Container>\n        <AppRouter store={store} />\n      </Container>\n      <Footer />\n      {/* <Overlay /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faSmile, faAddressBook } from \"@fortawesome/free-solid-svg-icons\";\r\nlibrary.add(faSmile, faAddressBook);\r\n","import AOS from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nAOS.init({\r\n  offset: 100,\r\n  duration: 700,\r\n  easing: \"ease-in-sine\",\r\n  delay: 100\r\n});\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst primaryColor = \"#007ebe\";\r\n\r\nexport const theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: [\r\n      \"Titillium Web\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"'\r\n    ].join(\",\")\r\n  },\r\n  palette: {\r\n    primary: {\r\n      // light: will be calculated from palette.primary.main,\r\n      main: primaryColor\r\n      // dark: will be calculated from palette.primary.main,\r\n      // contrastText: will be calculated to contrast with palette.primary.main\r\n    },\r\n    secondary: {\r\n      main: \"#8bb6cb\"\r\n      // dark: will be calculated from palette.secondary.main,\r\n    }\r\n    // error: will use the default color\r\n  },\r\n  overrides: {\r\n    MuiOutlinedInput: {\r\n      notchedOutline: {\r\n        borderColor: primaryColor,\r\n        borderWidth: 1\r\n      }\r\n    },\r\n    MuiInputLabel: {\r\n      root: {\r\n        // color: \"red\"\r\n        color: primaryColor\r\n      }\r\n    }\r\n  }\r\n});\r\n","import { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass ScrollToTop extends Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n","import React from \"react\";\r\nimport \"./theme.scss\";\r\nimport \"./App.scss\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"./materialTheme\";\r\nimport ScrollToTop from \"./ScrollToTopController\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { ContextProvider } from \"../stores/Context\";\r\n\r\nconst AppWrapper = props => {\r\n  return (\r\n    <BrowserRouter>\r\n      <ContextProvider>\r\n        <ThemeProvider theme={theme}>\r\n          <ScrollToTop>{props.children}</ScrollToTop>\r\n        </ThemeProvider>\r\n      </ContextProvider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default AppWrapper;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./helpers/vendors\";\nimport AppWrapper from \"./helpers/AppWrapper\";\n\nReactDOM.render(\n  <AppWrapper>\n    <App />\n  </AppWrapper>,\n  document.getElementById(\"root\")\n);\n","import { observable, action, decorate, runInAction, toJS } from \"mobx\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nclass NewPrescriptionStore {\r\n  patientId = \"\";\r\n  patientName = \"\";\r\n  showPatientNameInput = false;\r\n  note = \"\";\r\n  medicins = [];\r\n  classifications = [];\r\n  selectedClassification = -1;\r\n  submitingPrescription = false;\r\n  loading = true;\r\n  redirect = false;\r\n\r\n  SetPatientId(v) {\r\n    this.patientId = v;\r\n    this.FetchPatientName();\r\n  }\r\n\r\n  SetPatientName(v) {\r\n    this.patientName = v;\r\n  }\r\n\r\n  async FetchPatientName() {\r\n    try {\r\n      if (this.patientId.length < 6) return;\r\n      const res = await fetch(`/api/users/patient?id=${this.patientId}`);\r\n      const { data } = await res.json();\r\n      runInAction(() => {\r\n        if (data.Name) {\r\n          this.patientName = data.Name;\r\n          this.showPatientNameInput = false;\r\n        } else {\r\n          this.showPatientNameInput = true;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      this.showPatientNameInput = true;\r\n      this.patientName = \"\";\r\n    }\r\n  }\r\n\r\n  async FetchClassifications() {\r\n    try {\r\n      const res = await fetch(\"/api/medicins/classifications\");\r\n      const { data } = await res.json();\r\n      runInAction(() => {\r\n        this.classifications = data;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {}\r\n  }\r\n\r\n  SelectClassification(id) {\r\n    this.selectedClassification = id;\r\n  }\r\n\r\n  AddMedicine(medicine) {\r\n    this.medicins.push(medicine);\r\n  }\r\n\r\n  RemoveMedicin(index) {\r\n    this.medicins = this.medicins.filter((m, i) => i !== index);\r\n  }\r\n\r\n  ToggleChronic(index) {\r\n    this.medicins[index].isChronic = !this.medicins[index].isChronic;\r\n  }\r\n\r\n  ToggleBold(index) {\r\n    this.medicins[index].isBold = !this.medicins[index].isBold;\r\n  }\r\n\r\n  SetNote(value) {\r\n    this.note = value;\r\n  }\r\n\r\n  async SubmitPrescription() {\r\n    try {\r\n      if (this.submitingPrescription) return;\r\n\r\n      this.submitingPrescription = true;\r\n      const prescription = {\r\n        patientId: this.patientId,\r\n        patientName: this.patientName,\r\n        note: this.note,\r\n        medicins: toJS(this.medicins),\r\n        classificationId: this.selectedClassification\r\n      };\r\n      const response = await fetch(\"/api/patients/new-prescription\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(prescription)\r\n      });\r\n      if (!response.ok) throw Error();\r\n\r\n      await response.json();\r\n      NotificationManager.success(\"Prescription Created Successfully\");\r\n      this.submitingPrescription = false;\r\n      setTimeout(() => {\r\n        runInAction(() => {\r\n          this.redirect = true;\r\n        });\r\n      }, 3000);\r\n    } catch (error) {\r\n      NotificationManager.error(\"Prescription couldn't be created\");\r\n      this.submitingPrescription = false;\r\n    }\r\n  }\r\n}\r\n\r\ndecorate(NewPrescriptionStore, {\r\n  redirect: observable,\r\n  loading: observable,\r\n  selectedClassification: observable,\r\n  patientId: observable,\r\n  showPatientNameInput: observable,\r\n  submitingPrescription: observable,\r\n  patientName: observable,\r\n  note: observable,\r\n  medicins: observable,\r\n  classifications: observable,\r\n  AddMedicine: action,\r\n  SetPatientId: action,\r\n  FetchClassifications: action,\r\n  RemoveMedicin: action,\r\n  ToggleBold: action,\r\n  ToggleChronic: action,\r\n  SelectClassification: action,\r\n  SetNote: action,\r\n  SubmitPrescription: action,\r\n  FetchPatientName: action,\r\n  SetPatientName: action\r\n});\r\n\r\nexport default NewPrescriptionStore;\r\n// const todoStoreInstance = new NewPrescription();\r\n// export default todoStoreInstance;\r\n","import { observable, action, decorate, runInAction } from \"mobx\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nclass PatientPrescriptionsStore {\r\n  //Observables\r\n  patientId = \"\";\r\n  patientName = \"\";\r\n  classifications = [];\r\n  allPrescriptions = [];\r\n  prescriptions = [];\r\n  chronicMedicins = [];\r\n  selectedClassification = 0;\r\n  loading = true;\r\n  loadingPrescriptions = false;\r\n  //Class Props\r\n  abortController;\r\n  signal;\r\n\r\n  SetPatientId(v) {\r\n    this.patientId = v;\r\n    this.FetchPatientName();\r\n    this.FetchPrescriptions();\r\n  }\r\n\r\n  async FetchPatientName() {\r\n    try {\r\n      const res = await fetch(`/api/users/patient?id=${this.patientId}`);\r\n      const { data } = await res.json();\r\n      runInAction(() => {\r\n        this.patientName = data.Name;\r\n      });\r\n    } catch (error) {\r\n      this.patientName = \"\";\r\n    }\r\n  }\r\n\r\n  FilterPrescriptions() {\r\n    console.log(this.selectedClassification);\r\n    if (!this.selectedClassification)\r\n      this.prescriptions = this.allPrescriptions;\r\n    else\r\n      this.prescriptions = this.allPrescriptions.filter(\r\n        p => p.Classification_Id === this.selectedClassification\r\n      );\r\n  }\r\n\r\n  async FetchClassifications() {\r\n    try {\r\n      const res = await fetch(\"/api/medicins/classifications\");\r\n      const { data } = await res.json();\r\n      runInAction(() => {\r\n        this.classifications = data;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {}\r\n  }\r\n\r\n  async FetchPrescriptions() {\r\n    if (this.loadingPrescriptions) {\r\n      this.abortController.abort();\r\n    }\r\n\r\n    try {\r\n      this.loadingPrescriptions = true;\r\n      let fetchUrl = \"/api/patients/prescriptions?\";\r\n      fetchUrl = fetchUrl.concat(`patientId=${this.patientId}`);\r\n\r\n      //These will be used to abort the request if different parameters are specified\r\n      this.abortController = new AbortController();\r\n      this.signal = this.abortController.signal;\r\n      const res = await fetch(fetchUrl, { signal: this.signal });\r\n      const { data } = await res.json();\r\n      console.log(data);\r\n      runInAction(() => {\r\n        this.allPrescriptions = data.prescriptions;\r\n        this.chronicMedicins = data.chronicMedicins;\r\n        this.loadingPrescriptions = false;\r\n      });\r\n      this.FilterPrescriptions();\r\n    } catch (error) {\r\n      if (error.name === \"AbortError\") return; //when we abort request the error gets thrown from where we called fetch() so we catch it and do nothing\r\n      console.log(error);\r\n      //Request cancelled so that a new one can be sent\r\n      NotificationManager.error(\"Couldn't Get Prescriptions\");\r\n      this.loadingPrescriptions = false;\r\n    }\r\n  }\r\n\r\n  async SelectClassification(id) {\r\n    if (id === this.selectedClassification) this.selectedClassification = 0;\r\n    else this.selectedClassification = id;\r\n    if (this.patientId && this.allPrescriptions.length === 0)\r\n      await this.FetchPrescriptions();\r\n    else this.FilterPrescriptions();\r\n  }\r\n}\r\n\r\ndecorate(PatientPrescriptionsStore, {\r\n  loading: observable,\r\n  loadingPrescriptions: observable,\r\n  selectedClassification: observable,\r\n  prescriptions: observable,\r\n  chronicMedicins: observable,\r\n  patientId: observable,\r\n  patientName: observable,\r\n  classifications: observable,\r\n  SetPatientId: action,\r\n  FetchClassifications: action,\r\n  SelectClassification: action,\r\n  FetchPrescriptions: action,\r\n  FetchPatientName: action\r\n});\r\n\r\nexport default PatientPrescriptionsStore;\r\n// const todoStoreInstance = new PatientPrescriptionsStore();\r\n// export default todoStoreInstance;\r\n","import { observable, action, decorate, runInAction } from \"mobx\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nclass PrescriptionsDispensingStore {\r\n  //Observables\r\n  patientId = \"\";\r\n  patientName = \"\";\r\n  prescriptions = [];\r\n  loading = true;\r\n  loadingPrescriptions = false;\r\n  //Class Props\r\n  abortController;\r\n  signal;\r\n\r\n  SetPatientId(v) {\r\n    this.patientId = v;\r\n    this.FetchPatientName();\r\n    this.FetchPrescriptions();\r\n  }\r\n\r\n  async FetchPatientName() {\r\n    try {\r\n      const res = await fetch(`/api/users/patients?id=${this.patientId}`);\r\n      const { data } = await res.json();\r\n      runInAction(() => {\r\n        this.patientName = data.Name;\r\n      });\r\n    } catch (error) {\r\n      this.patientName = \"\";\r\n    }\r\n  }\r\n\r\n  async Dispense(prescriptionId, medicins = []) {\r\n    try {\r\n      const response = await fetch(\"/api/patients/dispense\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ prescriptionId, medicins })\r\n      });\r\n      if (!response.ok) throw Error();\r\n\r\n      await response.json();\r\n      NotificationManager.success(\"Prescription Dispensed Successfully\");\r\n      this.FetchPrescriptions();\r\n    } catch (error) {\r\n      NotificationManager.error(\"Couldn't Dispense Prescription\");\r\n    }\r\n  }\r\n\r\n  async FetchPrescriptions() {\r\n    try {\r\n      if (this.loadingPrescriptions) this.abortController.abort();\r\n    } catch (error) {}\r\n\r\n    try {\r\n      this.loadingPrescriptions = true;\r\n      let fetchUrl = \"/api/patients/prescriptions-to-dispense?\";\r\n      fetchUrl = fetchUrl.concat(`patientId=${this.patientId}`);\r\n\r\n      //These will be used to abort the request if different parameters are specified\r\n      this.abortController = new AbortController();\r\n      this.signal = this.abortController.signal;\r\n      const res = await fetch(fetchUrl, { signal: this.signal });\r\n      if (!res.ok) throw Error();\r\n\r\n      const { data } = await res.json();\r\n      runInAction(() => {\r\n        this.prescriptions = data.prescriptions;\r\n        this.loadingPrescriptions = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      //Request cancelled so that a new one can be sent\r\n      NotificationManager.error(\"Couldn't Get Prescriptions\");\r\n      this.loadingPrescriptions = false;\r\n    }\r\n  }\r\n\r\n  SelectClassification(id) {\r\n    this.selectedClassification = id;\r\n    if (this.patientId) this.FetchPrescriptions();\r\n  }\r\n}\r\n\r\ndecorate(PrescriptionsDispensingStore, {\r\n  loading: observable,\r\n  loadingPrescriptions: observable,\r\n  prescriptions: observable,\r\n  patientId: observable,\r\n  patientName: observable,\r\n  SetPatientId: action,\r\n  FetchPrescriptions: action,\r\n  FetchPatientName: action\r\n});\r\n\r\nexport default PrescriptionsDispensingStore;\r\n// const todoStoreInstance = new PrescriptionsDispensingStore();\r\n// export default todoStoreInstance;\r\n","import { observable, action, decorate, runInAction } from \"mobx\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nclass AppStore {\r\n  username = \"\";\r\n  role = \"\";\r\n\r\n  messagesCategories = [];\r\n\r\n  constructor() {\r\n    this.username = localStorage.getItem(\"username\");\r\n    this.role = localStorage.getItem(\"user-role\");\r\n    this.doctorName = localStorage.getItem(\"doctorName\") || undefined;\r\n    this.pharmacyName = localStorage.getItem(\"pharmacyName\") || undefined;\r\n  }\r\n\r\n  async Login(username, password) {\r\n    try {\r\n      const res = await fetch(\"/api/users/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n      const { data } = await res.json();\r\n\r\n      runInAction(() => {\r\n        this.role = data.role;\r\n\r\n        let redirectUrl = \"/\";\r\n        //Clear the storage\r\n        localStorage.removeItem(\"pharmacyName\");\r\n        localStorage.removeItem(\"doctorName\");\r\n\r\n        localStorage.setItem(\"username\", data.username);\r\n        localStorage.setItem(\"user-role\", this.role);\r\n\r\n        if (data.DoctorName) {\r\n          this.doctorName = data.DoctorName;\r\n          localStorage.setItem(\"doctorName\", this.doctorName);\r\n          NotificationManager.success(\"Welcome Back Doctor \" + this.doctorName);\r\n        } else if (data.PharmacyName) {\r\n          this.pharmacyName = data.PharmacyName;\r\n          localStorage.setItem(\"pharmacyName\", this.pharmacyName);\r\n          NotificationManager.success(\"Welcome Back  \");\r\n        } else if (data.IsAdmin) {\r\n          redirectUrl = \"/admin\";\r\n          NotificationManager.success(\"Welcome Back Admin \");\r\n        }\r\n        setTimeout(() => {\r\n          runInAction(() => {\r\n            this.username = data.username;\r\n            window.location = redirectUrl;\r\n          });\r\n        }, 3000);\r\n      });\r\n    } catch (error) {\r\n      NotificationManager.error(\"Couldn't Login with the provided credentials\");\r\n    }\r\n  }\r\n\r\n  async SendRequest(name, type, phone, email) {\r\n    try {\r\n      const res = await fetch(\"/api/users/request-account\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ name, type, phone, email })\r\n      });\r\n      const data = await res.json();\r\n      console.log(data);\r\n      NotificationManager.success(\" Your Request was sent successfuly\");\r\n    } catch (error) {\r\n      NotificationManager.error(\"Couldn't Login with the provided credentials\");\r\n    }\r\n  }\r\n\r\n  async Logout() {\r\n    try {\r\n      const res = await fetch(\"/api/users/logout\");\r\n      if (!res.ok) throw Error(\"couldn't logout\");\r\n\r\n      localStorage.removeItem(\"pharmacyName\");\r\n      localStorage.removeItem(\"doctorName\");\r\n      localStorage.removeItem(\"username\");\r\n      localStorage.removeItem(\"user-role\");\r\n      window.location = \"/login\";\r\n    } catch (error) {}\r\n  }\r\n\r\n  async FetchMessagesCategories() {\r\n    try {\r\n      const res = await fetch(\"/api/users/messages-categories\");\r\n      const { data } = await res.json();\r\n      runInAction(() => {\r\n        this.messagesCategories = data;\r\n      });\r\n    } catch (error) {}\r\n  }\r\n\r\n  async SendMessage(category, content) {\r\n    try {\r\n      const res = await fetch(\"/api/users/send-message\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ category, content })\r\n      });\r\n      if (!res.ok) throw Error(\"\");\r\n      NotificationManager.success(\" Your Message was sent successfuly\");\r\n    } catch (error) {\r\n      NotificationManager.error(\r\n        \"Something wrong happened while sending message\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\ndecorate(AppStore, {\r\n  username: observable,\r\n  role: observable,\r\n  messagesCategories: observable,\r\n  doctorName: observable,\r\n  pharmacyName: observable,\r\n  Login: action,\r\n  Logout: action,\r\n  FetchMessagesCategories: action\r\n});\r\n\r\nexport default new AppStore();\r\n// const todoStoreInstance = new NewPrescription();\r\n// export default todoStoreInstance;\r\n","import React from \"react\";\r\n\r\nimport NewPrescriptionStore from \"./NewPrescriptionStore\";\r\nimport PatientPrescriptionsStore from \"./PatientPrescriptionsStore\";\r\nimport PrescriptionsDispensingStore from \"./PrescriptionsDispensingStore\";\r\n\r\nimport AppStore from \"./AppStore\";\r\n\r\nexport const mainContext = React.createContext();\r\n\r\nexport const ContextProvider = props => {\r\n  return (\r\n    <mainContext.Provider\r\n      value={{\r\n        NewPrescriptionStore,\r\n        PatientPrescriptionsStore,\r\n        AppStore,\r\n        PrescriptionsDispensingStore\r\n      }}\r\n    >\r\n      {props.children}\r\n    </mainContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\nimport { useTheme } from \"@material-ui/core\";\r\n\r\nconst LoadingPage = props => {\r\n  const theme = useTheme();\r\n  return (\r\n    <div\r\n      className=\"row justify-content-center align-content-center py-5\"\r\n      style={{ minHeight: props.fullPage ? \"88vh\" : undefined }}\r\n    >\r\n      <ScaleLoader\r\n        //  css={override}\r\n        //        size={5}\r\n        height={55}\r\n        width={8}\r\n        margin={3}\r\n        color={theme.palette.primary.main}\r\n        loading={true}\r\n        {...props}\r\n      />\r\n      <h2 className=\"text-primary col-12 text-center py-2\">\r\n        {props.message || \"Loading\"}\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingPage;\r\n"],"sourceRoot":""}