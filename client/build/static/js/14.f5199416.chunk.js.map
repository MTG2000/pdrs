{"version":3,"sources":["Views/PatinetsPrescriptions/Partials/PatientIdInput.jsx","Views/PrescriptionsDispensing/Partials/PrescriptionCard.jsx","Views/PrescriptionsDispensing/Partials/PrescriptionsList.jsx","Views/PrescriptionsDispensing/index.jsx"],"names":["observer","store","useState","id","setId","t","useTranslation","className","style","maxWidth","label","type","value","onChange","e","target","onBlur","SetPatientId","onKeyUp","keyCode","blur","variant","color","showPatientNameInput","patientName","PrescriptionCard","prescription","newDate","date","format","Date","Prescription_Date","medicinsToDispense","setMedicinsToDispense","selectAll","setSelectAll","Note","Tooltip","title","Condition","src","ClassificationIconUrl","alt","Checkbox","checked","medicins","forEach","m","Id","toggleAll","inputProps","map","i","key","v","Name","Button","onClick","medicinsIds","Object","keys","filter","Number","Dispense","split","loadingPrescriptions","LoadingPage","message","prescriptions","p","DispensePrescription","PrescriptionsDispensingStore","useContext","mainContext","PatientIdInput"],"mappings":"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","file":"static/js/14.f5199416.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst PatientIdInput = ({ store }) => {\r\n  const [id, setId] = useState(\"\");\r\n  const { t } = useTranslation(\"common\");\r\n\r\n  return (\r\n    <div className=\" mx-auto row flex-column\" style={{ maxWidth: 330 }}>\r\n      <TextField\r\n        id=\"patient-id\"\r\n        label={t(\"patient id\")}\r\n        type=\"number\"\r\n        value={id}\r\n        onChange={e => setId(e.target.value)}\r\n        onBlur={() => store.SetPatientId(id)}\r\n        onKeyUp={e => e.keyCode === 13 && e.target.blur()} //if Enter was pressed\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        className=\"mb-3\"\r\n      />\r\n      {!store.showPatientNameInput && (\r\n        <h2 className=\"my-2\">{store.patientName}</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PatientIdInput);\r\n","import React, { useState } from \"react\";\r\nimport date from \"date-and-time\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Note from \"@material-ui/icons/Bookmark\";\r\n\r\n/*{\r\n            \"Id\": 1,\r\n            \"Doctor_Id\": 1,\r\n            \"Note\": \"The Patient sufferd from an intense injuery in his right arm\",\r\n            \"Prescription_Date\": \"2020-03-26 16:08:20\",\r\n            \"Classification_Name\": \"Heart\",\r\n            \"ClassificationIconUrl\": \"\\\\images\\\\classifications\\\\heart.svg\",\r\n            \"medicins\": [\r\n                {\r\n                    \"Name\": \"Sitamol\",\r\n                    \"IsBold\": \"0\",\r\n                    \"IsChronic\": \"0\",\r\n                    \"Pharmacy_Id\": null\r\n                },\r\n                {\r\n                    \"Name\": \"Panadol\",\r\n                    \"IsBold\": \"0\",\r\n                    \"IsChronic\": \"0\",\r\n                    \"Pharmacy_Id\": null\r\n                },\r\n                {\r\n                    \"Name\": \"Benzamien\",\r\n                    \"IsBold\": \"1\",\r\n                    \"IsChronic\": \"1\",\r\n                    \"Pharmacy_Id\": null\r\n                }\r\n            ]\r\n        }\r\n        */\r\nconst PrescriptionCard = ({ prescription, store }) => {\r\n  const newDate = date.format(\r\n    new Date(prescription.Prescription_Date),\r\n    \"DD MMM\"\r\n  );\r\n\r\n  const [medicinsToDispense, setMedicinsToDispense] = useState({});\r\n  const [selectAll, setSelectAll] = useState(true);\r\n  const toggleMedicineDispens = (id, v) => {\r\n    setMedicinsToDispense({ ...medicinsToDispense, [id]: v });\r\n  };\r\n\r\n  const toggleAll = () => {\r\n    let medicins = {};\r\n    prescription.medicins.forEach((m) => {\r\n      medicins = { ...medicins, [m.Id]: selectAll };\r\n    });\r\n    setMedicinsToDispense(medicins);\r\n    setSelectAll(!selectAll);\r\n  };\r\n\r\n  const handleDispense = () => {\r\n    const medicinsIds = Object.keys(medicinsToDispense)\r\n      .filter((m) => medicinsToDispense[m])\r\n      .map(Number);\r\n\r\n    store.Dispense(prescription.Id, medicinsIds);\r\n  };\r\n\r\n  return (\r\n    <div className=\"prescription-card mx-auto py-5\">\r\n      {prescription.Note ? (\r\n        <Tooltip title={<h6>{prescription.Note}</h6>}>\r\n          <div className=\"note  bg-primary px-3 py-3\">\r\n            <p className=\" mb-0 \">\r\n              {prescription.Condition} <Note />\r\n            </p>\r\n          </div>\r\n        </Tooltip>\r\n      ) : (\r\n        <div>\r\n          <div className=\"note  bg-primary px-3 py-3\">\r\n            <p className=\" mb-0 \">{prescription.Condition}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"icon \">\r\n        <img src={prescription.ClassificationIconUrl} alt=\"classification\" />\r\n      </div>\r\n\r\n      <div className=\"medicins px-4 py-5 py-md-0  row justify-content-begin\">\r\n        <div className=\"col-10 mx-2\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            checked={!selectAll}\r\n            onChange={(e) => toggleAll(e.target.checked)}\r\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n          />\r\n          <p className=\"d-inline-block ml-2 \"></p>{\" \"}\r\n        </div>\r\n\r\n        {prescription.medicins.map((m, i) => (\r\n          <div key={i} className=\"col-10 mx-2\">\r\n            <Checkbox\r\n              color=\"primary\"\r\n              checked={medicinsToDispense[m.Id] === true}\r\n              onChange={(e) => toggleMedicineDispens(m.Id, e.target.checked)}\r\n              inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n            />\r\n            <p className=\"d-inline-block ml-2 \">{m.Name}</p>\r\n          </div>\r\n        ))}\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\"mx-4\"\r\n          onClick={handleDispense}\r\n        >\r\n          Dispense\r\n        </Button>\r\n      </div>\r\n      <div className=\"date bg-primary\">\r\n        <span className=\"h4 text-center\">{newDate.split(\" \")[0]}</span>\r\n        <span>{newDate.split(\" \")[1]}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrescriptionCard;\r\n","import React from \"react\";\r\nimport PrescriptionCard from \"./PrescriptionCard\";\r\nimport { observer } from \"mobx-react\";\r\nimport LoadingPage from \"../../Shared/LoadingPage\";\r\n\r\nconst PrescriptionsList = ({ store }) => {\r\n  if (store.loadingPrescriptions)\r\n    return <LoadingPage message=\"Getting Prescriptions To Dispense\" />;\r\n\r\n  return (\r\n    <div>\r\n      {store.prescriptions.map((p, i) => (\r\n        <PrescriptionCard key={i} prescription={p} store={store} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PrescriptionsList);\r\n","import React, { useContext, useState } from \"react\";\r\nimport PatientIdInput from \"../PatinetsPrescriptions/Partials/PatientIdInput\";\r\nimport { mainContext } from \"../../stores/Context\";\r\nimport PrescriptionsList from \"./Partials/PrescriptionsList\";\r\n\r\nconst DispensePrescription = () => {\r\n  const { PrescriptionsDispensingStore } = useContext(mainContext);\r\n  const [store] = useState(new PrescriptionsDispensingStore());\r\n\r\n  return (\r\n    <div className=\"py-5\">\r\n      <div style={{ maxWidth: 230 }} className=\"mx-auto\">\r\n        <PatientIdInput store={store} />\r\n      </div>\r\n      <PrescriptionsList store={store} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DispensePrescription;\r\n"],"sourceRoot":""}