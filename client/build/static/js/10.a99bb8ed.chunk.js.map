{"version":3,"sources":["Views/PatinetsPrescriptions/Partials/PatientIdInput.jsx","Views/Shared/ClassificationsFilter.jsx","Views/PatinetsPrescriptions/Partials/PrescriptionCard.jsx","Views/PatinetsPrescriptions/Partials/ChronicMedicins.jsx","Views/PatinetsPrescriptions/Partials/PrescriptionsList.jsx","Views/PatinetsPrescriptions/index.js"],"names":["observer","store","useState","id","setId","className","style","maxWidth","label","type","value","onChange","e","target","onBlur","SetPatientId","onKeyUp","keyCode","blur","variant","color","showPatientNameInput","patientName","classifications","map","c","title","Name","key","Id","enterDelay","selectedClassification","onClick","SelectClassification","src","ImageUrl","alt","PrescriptionCard","prescription","fullDate","date","format","Date","Prescription_Date","miniDate","note","Note","Tooltip","slice","length","ClassificationIconUrl","medicins","m","i","Pharmacy_Id","IsBold","split","ChronicMedicins","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","loadingPrescriptions","LoadingPage","message","chronicMedicins","prescriptions","p","PatientPrescriptionsStore","useContext","mainContext","useEffect","FetchClassifications","loading","Box","py","display","PatientIdInput","ClassificationsFilter"],"mappings":"gJA4BeA,iBAxBQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAChBC,mBAAS,IADO,mBAC7BC,EAD6B,KACzBC,EADyB,KAGpC,OACE,yBAAKC,UAAU,2BAA2BC,MAAO,CAAEC,SAAU,MAC3D,kBAAC,IAAD,CACEJ,GAAG,aACHK,MAAM,aACNC,KAAK,SACLC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAMQ,EAAEC,OAAOH,QAC9BI,OAAQ,kBAAMb,EAAMc,aAAaZ,IACjCa,QAAS,SAAAJ,GAAC,OAAkB,KAAdA,EAAEK,SAAkBL,EAAEC,OAAOK,QAC3CC,QAAQ,WACRC,MAAM,UACNf,UAAU,UAEVJ,EAAMoB,sBACN,wBAAIhB,UAAU,QAAQJ,EAAMqB,kB,iCCtBpC,qCAuBetB,iBAnBe,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC/B,OACE,yBAAKI,UAAU,8BACZJ,EAAMsB,gBAAgBC,KAAI,SAAAC,GAAC,OAC1B,kBAAC,IAAD,CAASC,MAAOD,EAAEE,KAAMC,IAAKH,EAAEI,GAAIC,WAAY,KAC7C,yBACEzB,UAAS,yCACPJ,EAAM8B,yBAA2BN,EAAEI,GAAK,WAAa,IAEvDG,QAAS,kBAAM/B,EAAMgC,qBAAqBR,EAAEI,MAE5C,yBAAKK,IAAKT,EAAEU,SAAUC,IAAKX,EAAEE,iB,qJC2E1BU,EAvDU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpBC,EAAWC,IAAKC,OACpB,IAAIC,KAAKJ,EAAaK,mBACtB,eAGIC,EAAWJ,IAAKC,OACpB,IAAIC,KAAKJ,EAAaK,mBACtB,UAGIE,EAAOP,EAAaQ,KAE1B,OACE,yBAAKzC,UAAU,kCACb,kBAAC0C,EAAA,EAAD,CAASrB,MAAO,4BAAKmB,IACnB,yBAAKxC,UAAU,8BACb,uBAAGA,UAAU,UACVwC,EAAKG,MAAM,EANI,IAOfH,EAAKI,OAPU,IAOoB,UAI1C,yBAAK5C,UAAU,SACb,yBAAK6B,IAAKI,EAAaY,sBAAuBd,IAAI,oBAGpD,yBAAK/B,UAAU,yDACZiC,EAAaa,SAAS3B,KAAI,SAAC4B,EAAGC,GAAJ,OACzB,yBAAKzB,IAAKyB,EAAGhD,UAAU,wBACpB+C,EAAEE,YACD,kBAAC,IAAD,CAAOhD,MAAO,CAAEc,MAAO,WAEvB,kBAAC,IAAD,CAAOd,MAAO,CAAEc,MAAO,SACtB,IACH,uBACEf,UAAS,8BACM,MAAb+C,EAAEG,OAAiB,mBAAqB,KAGzCH,EAAEzB,WAKX,kBAACoB,EAAA,EAAD,CAASrB,MAAOa,GACd,yBAAKlC,UAAU,mBACb,0BAAMA,UAAU,kBAAkBuC,EAASY,MAAM,KAAK,IACtD,8BAAOZ,EAASY,MAAM,KAAK,Q,8DCnDtBC,EAzBS,SAAC,GAAkB,IAAhBN,EAAe,EAAfA,SACzB,OACE,yBAAK9C,UAAU,oBAAoBC,MAAO,CAAEC,SAAU,MACpD,kBAACmD,EAAA,EAAD,CAAgBC,iBAAiB,GAC/B,kBAACC,EAAA,EAAD,CACEC,WAAY,kBAAC,IAAD,MACZC,gBAAc,kBACd3D,GAAG,kBAEH,kBAAC4D,EAAA,EAAD,CAAY1D,UAAU,iCAAtB,qBAIF,kBAAC2D,EAAA,EAAD,KACE,yBAAK3D,UAAU,QACZ8C,EAAS3B,KAAI,SAAC4B,EAAGC,GAAJ,OACZ,kBAACU,EAAA,EAAD,CAAYnC,IAAKyB,GAAID,W,QCDpBpD,eAhBW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3B,OAAIA,EAAMgE,qBACD,kBAACC,EAAA,EAAD,CAAaC,QAAQ,0BAG5B,yBAAK9D,UAAU,QACZJ,EAAMmE,gBAAgBnB,OAAS,GAC9B,kBAAC,EAAD,CAAiBE,SAAUlD,EAAMmE,kBAElCnE,EAAMoE,cAAc7C,KAAI,SAAC8C,EAAGjB,GAAJ,OACvB,kBAAC,EAAD,CAAkBzB,IAAKyB,EAAGf,aAAcgC,W,iBCejCtE,uBAtBe,WAAO,IAC3BuE,EAA8BC,qBAAWC,KAAzCF,0BAD0B,EAGlBrE,mBAAS,IAAIqE,GAAtBtE,EAH2B,oBASlC,OAJAyE,qBAAU,WACRzE,EAAM0E,yBACL,CAAC1E,IAEAA,EAAM2E,QAAgB,kBAACV,EAAA,EAAD,MAGxB,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAKC,GAAI,EAAGC,QAAQ,QAClB,kBAACC,EAAA,EAAD,CAAgB/E,MAAOA,KAEzB,kBAACgF,EAAA,EAAD,CAAuBhF,MAAOA,IAC9B,kBAAC,EAAD,CAAmBA,MAAOA","file":"static/js/10.a99bb8ed.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst PatientIdInput = ({ store }) => {\r\n  const [id, setId] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\" mx-auto row flex-column\" style={{ maxWidth: 330 }}>\r\n      <TextField\r\n        id=\"patient-id\"\r\n        label=\"Patient Id\"\r\n        type=\"number\"\r\n        value={id}\r\n        onChange={e => setId(e.target.value)}\r\n        onBlur={() => store.SetPatientId(id)}\r\n        onKeyUp={e => e.keyCode === 13 && e.target.blur()} //if Enter was pressed\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        className=\"mb-3\"\r\n      />\r\n      {!store.showPatientNameInput && (\r\n        <h2 className=\"my-2\">{store.patientName}</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PatientIdInput);\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nconst ClassificationsFilter = ({ store }) => {\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      {store.classifications.map(c => (\r\n        <Tooltip title={c.Name} key={c.Id} enterDelay={1000}>\r\n          <div\r\n            className={`classification-icon  mx-4 my-2 ${\r\n              store.selectedClassification === c.Id ? \"selected\" : \"\"\r\n            }`}\r\n            onClick={() => store.SelectClassification(c.Id)}\r\n          >\r\n            <img src={c.ImageUrl} alt={c.Name} />\r\n          </div>\r\n        </Tooltip>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(ClassificationsFilter);\r\n","import React from \"react\";\r\nimport date from \"date-and-time\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\n/*{\r\n            \"Id\": 1,\r\n            \"Doctor_Id\": 1,\r\n            \"Note\": \"The Patient sufferd from an intense injuery in his right arm\",\r\n            \"Prescription_Date\": \"2020-03-26 16:08:20\",\r\n            \"Classification_Name\": \"Heart\",\r\n            \"ClassificationIconUrl\": \"\\\\images\\\\classifications\\\\heart.svg\",\r\n            \"medicins\": [\r\n                {\r\n                    \"Name\": \"Sitamol\",\r\n                    \"IsBold\": \"0\",\r\n                    \"IsChronic\": \"0\",\r\n                    \"Pharmacy_Id\": null\r\n                },\r\n                {\r\n                    \"Name\": \"Panadol\",\r\n                    \"IsBold\": \"0\",\r\n                    \"IsChronic\": \"0\",\r\n                    \"Pharmacy_Id\": null\r\n                },\r\n                {\r\n                    \"Name\": \"Benzamien\",\r\n                    \"IsBold\": \"1\",\r\n                    \"IsChronic\": \"1\",\r\n                    \"Pharmacy_Id\": null\r\n                }\r\n            ]\r\n        }\r\n        */\r\nconst PrescriptionCard = ({ prescription }) => {\r\n  const fullDate = date.format(\r\n    new Date(prescription.Prescription_Date),\r\n    \"YYYY-MM-DD \"\r\n  );\r\n\r\n  const miniDate = date.format(\r\n    new Date(prescription.Prescription_Date),\r\n    \"DD MMM\"\r\n  );\r\n\r\n  const note = prescription.Note;\r\n  const allowedNoteLength = 60;\r\n  return (\r\n    <div className=\"prescription-card mx-auto py-5\">\r\n      <Tooltip title={<h6>{note}</h6>}>\r\n        <div className=\"note  bg-primary px-3 py-3\">\r\n          <p className=\" mb-0 \">\r\n            {note.slice(0, allowedNoteLength)}\r\n            {note.length > allowedNoteLength && \"....\"}\r\n          </p>\r\n        </div>\r\n      </Tooltip>\r\n      <div className=\"icon \">\r\n        <img src={prescription.ClassificationIconUrl} alt=\"classification\" />\r\n      </div>\r\n\r\n      <div className=\"medicins px-4 py-5 py-md-0  row justify-content-begin\">\r\n        {prescription.medicins.map((m, i) => (\r\n          <div key={i} className=\"col-10 col-md-5 mx-2\">\r\n            {m.Pharmacy_Id ? (\r\n              <Check style={{ color: \"green\" }} />\r\n            ) : (\r\n              <Close style={{ color: \"red\" }} />\r\n            )}{\" \"}\r\n            <p\r\n              className={`d-inline-block ml-2 ${\r\n                m.IsBold === \"1\" ? \"font-weight-bold\" : \"\"\r\n              }`}\r\n            >\r\n              {m.Name}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Tooltip title={fullDate}>\r\n        <div className=\"date bg-primary\">\r\n          <span className=\"h4 text-center\">{miniDate.split(\" \")[0]}</span>\r\n          <span>{miniDate.split(\" \")[1]}</span>\r\n        </div>\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrescriptionCard;\r\n","import React from \"react\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst ChronicMedicins = ({ medicins }) => {\r\n  return (\r\n    <div className=\"py-4 mt-5 mx-auto\" style={{ maxWidth: 500 }}>\r\n      <ExpansionPanel defaultExpanded={true}>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className=\"font-weight-bold text-primary\">\r\n            Chronic Medicins\r\n          </Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <div className=\"px-2\">\r\n            {medicins.map((m, i) => (\r\n              <Typography key={i}>{m}</Typography>\r\n            ))}\r\n          </div>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChronicMedicins;\r\n","import React from \"react\";\r\nimport PrescriptionCard from \"./PrescriptionCard\";\r\nimport { observer } from \"mobx-react\";\r\nimport ChronicMedicins from \"./ChronicMedicins\";\r\nimport LoadingPage from \"../../Shared/LoadingPage\";\r\n\r\nconst PrescriptionsList = ({ store }) => {\r\n  if (store.loadingPrescriptions)\r\n    return <LoadingPage message=\"Getting Prescriptions\" />;\r\n\r\n  return (\r\n    <div className=\"pb-5\">\r\n      {store.chronicMedicins.length > 0 && (\r\n        <ChronicMedicins medicins={store.chronicMedicins} />\r\n      )}\r\n      {store.prescriptions.map((p, i) => (\r\n        <PrescriptionCard key={i} prescription={p} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PrescriptionsList);\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport PatientIdInput from \"./Partials/PatientIdInput\";\r\nimport PrescriptionsList from \"./Partials/PrescriptionsList\";\r\nimport { observer } from \"mobx-react\";\r\nimport { mainContext } from \"../../stores/Context\";\r\nimport LoadingPage from \"../Shared/LoadingPage\";\r\nimport ClassificationsFilter from \"../Shared/ClassificationsFilter\";\r\n\r\nconst PatientsPrescriptions = () => {\r\n  const { PatientPrescriptionsStore } = useContext(mainContext);\r\n\r\n  const [store] = useState(new PatientPrescriptionsStore());\r\n\r\n  useEffect(() => {\r\n    store.FetchClassifications();\r\n  }, [store]);\r\n\r\n  if (store.loading) return <LoadingPage />;\r\n\r\n  return (\r\n    <Box>\r\n      <Box py={5} display=\"flex\">\r\n        <PatientIdInput store={store} />\r\n      </Box>\r\n      <ClassificationsFilter store={store} />\r\n      <PrescriptionsList store={store} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default observer(PatientsPrescriptions);\r\n"],"sourceRoot":""}